import execjs
import smtplib
import schedule
import time
from email.mime.text import MIMEText
from email.utils import formataddr

my_sender = '1377865740@qq.com'  # 发件人邮箱账号
my_pass = 'nhcsjfmoirnrbaba'  # 发件人邮箱密码
my_user = '1377865740@qq.com'  # 收件人邮箱账号，我这边发送给自己

def mail(x):
    ret = True
    try:
        msg = MIMEText('嫌疑人地址有异动'+x, 'plain', 'utf-8')
        msg['From'] = formataddr(["FromRunoob", my_sender])  # 括号里的对应发件人邮箱昵称、发件人邮箱账号
        msg['To'] = formataddr(["FK", my_user])  # 括号里的对应收件人邮箱昵称、收件人邮箱账号
        msg['Subject'] = '嫌疑人地址异常'  # 邮件的主题，也可以说是标题

        server = smtplib.SMTP_SSL("smtp.qq.com", 465)  # 发件人邮箱中的SMTP服务器，端口是25
        server.login(my_sender, my_pass)  # 括号中对应的是发件人邮箱账号、邮箱密码
        server.sendmail(my_sender, [my_user, ], msg.as_string())  # 括号中对应的是发件人邮箱账号、收件人邮箱账号、发送邮件
        server.quit()  # 关闭连接
    except Exception:  # 如果 try 中的语句没有执行，则会执行下面的 ret=False
        ret = False
    return ret
w3j = execjs.compile("""var Web3 = require("web3");
var web3 = new Web3(new Web3.providers.HttpProvider("http://106.53.86.142:8585"));
var VnscoinTx = require('vnscoinjs-tx');
function get_block(n) {
    return web3.vns.getBlock(n)
}
function get_balance(n) {
    return web3.vns.getBalance(n)
    }
function get_transaction(n) {
    return web3.vns.getTransaction(n)
}""")
list_suspect = ['0X0921B564909B66F909B582880D4C0EEAFA28E372','0X00EAEB0CB606261D3AC2E3E5786D9A5AB42EB7E0', '0X00EAEB0CBB606261D3AC2E3E5786D9A5AB42EB7E0', '0X0B1DA47F043EAB3A89F1FC19589D26C2A99A4D91', '0X0C63668E35FB8FBA4F718924F2DCAF10C94139F5', '0X0F12669A8C90F94F95B7E169E02FA3659826C172', '0X11EC27512BB521A04881915A5F8AA07B24B5E76C', '0X1215BE95892ED885EB43B1CF8D7554BDEFFC3FB3', '0X129E8BA6530569CFF8DE93963B08125BDEEF1AFD', '0X13744CB92493535B01C86D34E32B89128233139A', '0X1616163CC5918572C0E67118E529A5BB66D86E87', '0X1D04AAD9EAE78FF8ACCFC3358736D247A40848DF', '0X269ACC339DD52DABD23FF9EEDF14CD1B90769300', '0X2E753D174C49FE45704B7E16B989B4A2F010E599', '0X3186C0088C869E8D1A798F3144A5C47D96986611', '0X348C66B90B1184A6506F5BECBD8A64A7996032C4', '0X383FC955A904F3721FC4FDDC1AEAC0499A25FC45', '0X42FD20F0D861AFB41878AA464A201FC6FD989965', '0X44410D6E809FAD34D5DB56A3DB73920BC763', '0X44410D6E809FAD6AB34D5DBE56A3DB73920BC763', '0X4636078DC21B6737E71903C6F9E57895CAA56C81', '0X4CEA7F3016C9B398D9A6F19F4A3C622A79CD0D08', '0X538B5FDAC587542FA322F47B580C9D8F457D3AAC', '0X538B5FDAC587542FA322F47B580C9D8F45D3AAC', '0X548A4DF1C5DF5FDD029C92B150A13EE31F9FDBF2', '0X5AF6E99318E41DBA544D8FD675C21EBE7CDDFCBF', '0X623DB8513C680D1581796E2222FFCA54C107AE21', '0X68384A5698EB1BDA577192865A71230464DE4166', '0X6BE2BACCF37280DFACB45186EAEF9A06D3720834', '0X6BF2DBED14AC45ED00E6C85C01CB124BD961205C', '0X6FA6960B0D7CBCB10E8112F1FC1C06E65C2C40FE', '0X71A08BDEB6AE4D5FE6A600E8A8744041FC0DF65D', '0X71BEE4E4C4EA187E255D5E560A7894450356A40A', '0X73F4E0E0ECD18A92A9AA836D9DCD4CBA9D59899E', '0X79026EE9EF0A71AEC364462133051533306A2C7E', '0X7C3CE94751308A180C5F16F2EF01C3B93A10AE47', '0X869A1849452838F98B7A3764389CE554505529B6', '0X87089497BFF1D3BF3A79FCBD063952753467B3F4', '0X8CB434DAF0062C575B6DDBA8EB59E059C18848D5', '0X93523DBC6AC34EF0F670077188CA8D8C7531923A', '0X93C27425779B9DDD2048B3461CF905897058CD37', '0X9924F461E26C32A447878C7C446E71A6A9F0E334', '0X9B57A9883C41531752D70E26C08E6A126CEB9A3F', '0X9C1F8E0080472B2013E6BD29C7F60771621A132F', '0X9FFCD475362A28A2A3BE9AAC09439A544970348D', '0XA7A3E740211225ED8409F6876E223C8B169048D3', '0XA820D1E7CE82CEF849244A1125FB083B8B743E01', '0XAF534F165687A89CE7D84C6EDF0A109196C04199', '0XAF53C4904F24C87D39EEA329526579B0DE57E9AD', '0XB5C2DF700D1174D4F4041F75CB57B9B7141AE747', '0XB5C2DF700D1174D4F4041F75CB57B9B714AE747', '0XB71A530A56512CCE8E583E24436A554C0D8AA770', '0XB8B611DF04BB901444456C901FF22839CD7F8B81', '0XBD2978739E8A2DEAEE55A1E7D0910377D5B58437', '0XBEA1B1CF584A4AC63844A09FAB7FEC7108BDDBC3', '0XC2E77D88C4040CF5CEE266B663054632622D3711', '0XC3D05F2FDD04B85612F58A178E56D7C4645C7141', '0XCE9105818B19E167F7A423134C459A30186FC4CD', '0XCF9EAE6E627788092D1D22C702DA104680C39F0C', '0XD084E9CD056BB0BAAC0DDEB8FFB53A940BBAEB29', '0XD5A3AE0185E55CA73C219DA6AB9342C97D5BE751', '0XDCB1600D34B7F615F3EA1E933C538880108B3C05', '0XE0F722DC1C8ED12ABE0A0BDB00E243189DA1A295', '0XE4BD5FDA900A8CD17C57978518CD74E203C44108', '0XE68C82D8A43039701782DC30DE709D129AA6413B', '0XF66E20982D56B00F22812EAFA2E0C42AC818F0BC', '0XF671A865591AA3DCA9347791B5D0A70B616EA4DC', '0XF84584EB24E3F8C842063303FBBDB478E3470972', '0XF8ABE98AF5843987F873E3144DDF38FF2693A6D1', '0XF924D14E850CE5FB8D35D426B02886A66262DFC9']
def listen():
    T = True
    while T:
        get_block = w3j.call('get_block','latest')
        print(get_block['number'])

        for p in get_block['transactions']:
            b =w3j.call('get_transaction',p)
            f = b['from'].upper()
            print(f)

            if f in list_suspect:
                print('嫌疑人地址有异动:'+f)
                mail(f)
                T = False
        time.sleep(3)
schedule.every(10).seconds.do(listen)
while True:
    # 启动服务
    schedule.run_pending()
    time.sleep(1)